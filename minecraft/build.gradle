import com.google.gson.Gson
import net.fabricmc.loom.providers.MappingsCache
import net.fabricmc.loom.util.MinecraftVersionInfo
import net.fabricmc.loom.util.TinyRemapperMappingsHelper
import net.fabricmc.stitch.merge.JarMerger
import net.fabricmc.tinyremapper.TinyRemapper
import net.fabricmc.tinyremapper.OutputConsumerPath
import org.checkerframework.checker.units.qual.A

import java.nio.file.Paths
import java.util.concurrent.Callable
import java.util.function.Function
import java.util.function.IntFunction
import java.util.stream.Stream

buildscript {
    repositories {
        maven {
            url = "https://maven.fabricmc.net"
        }
    }
    dependencies {
        classpath "net.fabricmc:fabric-loom:0.2.5-SNAPSHOT"
    }
}
plugins {
    id 'java-library'
    id "de.undercouch.download" version "4.0.0"
}

group 'com.hrznstudio'
version '1.0.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url = "https://libraries.minecraft.net/"
    }
}

configurations {
    minecraft
    mcl
    api.extendsFrom mcl
}

task downloadMinecraft(type: Exec) {
    FileReader reader = new FileReader(new File(this.projectDir, "version/1.14.4.json"))
    Gson gson = new Gson();
    MinecraftVersionInfo versionInfo = gson.fromJson(reader, MinecraftVersionInfo.class)

    download {
        src "https://launcher.mojang.com/v1/objects/8c325a0c5bd674dd747d6ebaa4c791fd363ad8a9/client.jar"
        dest 'minecraft/minecraft-client.1.14.4.jar'
        onlyIfModified true
    }
    download {
        src "https://launcher.mojang.com/v1/objects/3dc3d84a581f14691199cf6831b71ed1296a9fdf/server.jar"
        dest 'minecraft/minecraft-server.1.14.4.jar'
        onlyIfModified true
    }

    for (MinecraftVersionInfo.Library library : versionInfo.libraries) {
        if (library.allowed()) {
            project.dependencies.add("mcl", project.dependencies.module(library.getArtifactName()))
        }
    }
    def merged = new File(this.projectDir, "minecraft/minecraft-merged.1.14.4.jar")
    def client = new File(this.projectDir, "minecraft/minecraft-client.1.14.4.jar");
    def server = new File(this.projectDir, "minecraft/minecraft-server.1.14.4.jar");
    if (!merged.exists() && (server.exists() && client.exists())) {
        def merger = new JarMerger(client, server, merged)
        merger.enableSyntheticParamsOffset()
        merger.merge()
    } else {
        if(!merged.exists()) {
            throw new RuntimeException("Failed to download minecraft")
        }
    }

    def original = merged;
    def output = new File(this.projectDir, "minecraft/minecraft.1.14.4.jar")

    if(!output.exists()) {
        println(":remapping ${original.name}")

        def mappingFile = new File(original.parentFile.parentFile, "mapping/build.12.tiny")
        def inputPath = original.toPath()

        def remapper = TinyRemapper.newRemapper().withMappings(TinyRemapperMappingsHelper.create(MappingsCache.INSTANCE.get(mappingFile.toPath()), "official", "named")).renameInvalidLocals(true).rebuildSourceFilenames(true).build()

        try {
            println(":remapping")
            OutputConsumerPath outputConsumer = new OutputConsumerPath.Builder(output.toPath()).build()
            outputConsumer.addNonClassFiles(inputPath);
            def set = new HashSet<String>();
            for(String s : configurations.mcl.asPath.split(";")){
                set.add(s)
            }
            println(set)
            remapper.readClassPath((java.nio.file.Path[])set.stream().map(new Function<String, java.nio.file.Path>() {
                @Override
                java.nio.file.Path apply(String s) {
                    return Paths.get(s)
                }
            }).toArray(new IntFunction<java.nio.file.Path[]>() {
                @Override
                java.nio.file.Path[] apply(int value) {
                    return new java.nio.file.Path[value]
                }
            }));
            remapper.readInputs(inputPath)
            remapper.apply(outputConsumer)
            println(":finished remapping")
        } catch (Exception e) {
            throw new RuntimeException("Failed to remap JAR", e);
        } finally {
            remapper.finish();
        }
    } else {
        println(output.size())
    }

}

dependencies {
    api(files("${this.projectDir}/minecraft/minecraft.1.14.4.jar") {
        builtBy downloadMinecraft
    })
}